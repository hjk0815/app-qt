<?php
/* 
** # DO NOT EDIT THIS FILE!  
** # Auto generated from: 
** # D:\t\17.LARK\00.doc\03.HMI协议
** # 2024/5/8 18:25:24 
**/



//----------------------------------------------------------------------
/* @brief 主机IP */
/* @note 可通过配置修改
 */
define('DEFAULT_HOST_IP',                       "192.168.1.11"); /* hex:0x0*/

/* @brief 雷达设备IP */
/* @note 可通过配置修改
 */
define('DEFAULT_DEVICE_IP',                     "192.168.1.10"); /* hex:0x0*/

/* @brief 子网掩码 */
/* @note 可通过配置修改
 */
define('DEFAULT_NET_MASK',                      "255.255.255.0"); /* hex:0x0*/

/************通道定义（设备PS侧）************/
/* @brief UDP数据端口（V1） */
/* @note 1、旧协议端口保留，相关代码保留
 */
define('UDP_DATA_PORT',                          8000 ); /* hex:0x0*/

/* @brief UDP日志端口（V1） */
/* @note 1、旧协议端口保留，相关代码保留
 */
define('UDP_LOG_PORT',                           8002 ); /* hex:0x0*/

/* @brief WEB配置端口(HTTP) */
/* @note 1、ARM（PS）开启httpServer，等待用户使用浏览器访问：http://192.168.0.10：8800/index.html...
2、最大支持xx个HTTP连接
 */
define('HTTP_SERVER_PORT',                       8800 ); /* hex:0x0*/

/* @brief 广播端口(UDP) */
/* @note 设备一直监听该端口，主机上线时向域内该端口发送广播消息，消息包括主机IP等内容。设备此时可启动相关数据传输
 */
define('DEV_BROADCAST_PORT',                     8801 ); /* hex:0x0*/

/* @brief 指令端口(TCP) */
/* @note 1、雷达设备监听该端口
2、主机可能会发送以下几种数据：
  a广播数据-主机必要时广播嗅探指令，所有设备主动返回本机IP地址等信息（一般用于初始化或设备首次使用）
  b单播数据-设备接收主机控制指令，设备异步返回响应数据，详细指令见“控制指令”标签页
 */
define('DEV_CMD_PORT',                           8802 ); /* hex:0x0*/

/* @brief IAP升级端口(TCP) */
/* @note 1、雷达设备监听该端口，等待主机发送升级数据并进行握手交互
2、数据报文格式同控制指令，差异仅在于最大长度为65000
3、仅支持一个TCP升级连接
 */
define('DEV_IAP_PORT',                           8803 ); /* hex:0x0*/

/* @brief IAP V2升级端口(TCP) */
/* @note 1、主通讯方式同V1
2、dev侧只接收升级数据，状态则通过寄存器通道读写
 */
define('DEV_IAP2_PORT',                          8804 ); /* hex:0x0*/

/* @brief IAP V2升级端口(UDP) */
/* @note 1、主通讯方式同V1
2、dev侧只接收升级数据，状态则通过寄存器通道读写
 */
define('DEV_IAP2_UDP',                           8805 ); /* hex:0x0*/

/************端口定义（主机侧）************/
/* @brief 主机广播端口(UDP) */
/* @note 主机一直监听该端口，设备上线时向域内该端口发送广播消息，消息包括自身IP等内容
 */
define('HOST_BROADCAST_PORT',                    8810 ); /* hex:0x0*/

/* @brief 点云广播端口(UDP) */
/* @note 点云数据广播端口，处理完成的点云数据会广播发出，用于点云分析或自动化测试
 */
define('HOST_POINTS_PORT',                       8811 ); /* hex:0x0*/

/* @brief RPC端口(TCP) */
/* @note 1、主机监听该端口
2、消息和返回使用json格式
 */
define('RPC_CMD_PORT',                           8812 ); /* hex:0x0*/

/* @brief IMU数据端口(UDP) */
/* @note 1、主机监听该端口，等待雷达设备（PS）上报IMU数据，格式见“1数据通道”
 */
define('HOST_IMU_PORT',                          8813 ); /* hex:0x0*/

/************字节序************/
/* @brief 默认报文头 */
/* @note 所有报文统一使用'0xee'作为报文头用于解析识别
 */
define('MORE_PACKET_PREAMLE',                   0xee); /* hex:0x0*/

/************最大报文长度************/
/* @brief 最大报文长度 */
/* @note 最大报文长度
 */
define('MAX_PACKET_LENGTH',                      4096 ); /* hex:0x0*/

/* @brief 最大dump内存长度 */
/* @note 最大dump内存长度
 */
define('MAX_MEM_DUMP_LENGTH',                    16384 ); /* hex:0x0*/

/* @brief 噪底长度 */
/* @note 噪底查找表长度
 */
define('MAX_NOISE_SAMPLE_SIZE',                  4096 ); /* hex:0x0*/

/* @brief 通道数量 */
/* @note 系统激光器数量
 */
define('MAX_LASER_NUMBER',                       8 ); /* hex:0x0*/

/************字节序************/

//----------------------------------------------------------------------
//enum SYSTEM_CMD_E
/* @brief 读取指定设备版本 */
define('SYS_VERSION',                            1 );

/* @brief 执行测试 */
define('SYS_TEST',                               2 );

/* @brief 系统初始化 */
define('SYS_INIT',                               3 );

/* @brief 系统复位 */
define('SYS_RESET',                              4 );

/* @brief 系统参数还原 */
define('SYS_RECOVER',                            5 );

/* @brief 系统状态查询 */
define('SYS_STATUS',                             6 );

/* @brief 参数存档 */
define('SYS_SAVE',                               7 );

/* @brief 启动IAP升级 */
define('SYS_IAP',                                8 );

/* @brief 设置寄存器 */
define('REG_SET',                                9 );

/* @brief 读取寄存器 */
define('REG_GET',                                10 );

/* @brief 设置寄存器位 */
define('BIT_SET',                                11 );

/* @brief 读取寄存器位 */
define('BIT_GET',                                12 );

/* @brief 寄存器块读取 */
define('REG_DUMP',                               13 );

/* @brief 寄存器块写入 */
define('REG_WRITE',                              14 );

/************状态响应(Device-->Host)************/
/* @brief 状态上报 */
define('SYS_REPORT',                             21 );

/* @brief 调试信息 */
define('DBG_MSG',                                22 );

/* @brief 最大值（参数合法性限定，不直接使用） */
define('SYS_MAX',                                30 );


//----------------------------------------------------------------------
//enum DEVICE_ID_E
/* @brief 全局参数 */
define('DEVICE_GLOBAL',                          0 );
/* @brief 上层软件 */
define('DEVICE_HOST',                            1 );
/* @brief 自动化脚本 */
define('DEVICE_CI',                              2 );
/* @brief HTTP Server */
define('DEVICE_HTTP_SERVER',                     3 );
/* @brief 验证板(SSI+BISS) */
define('DEVICE_EVB',                             4 );
/* @brief 直线滑台 */
define('DEVICE_DELTA',                           5 );
/* @brief RPC服务 */
define('DEVICE_RPC',                             6 );
/* @brief 算法模块 */
define('DEVICE_ALG',                             7 );
/* @brief STM32 */
define('DEVICE_STM32',                           10 );
/* @brief FPGA */
define('DEVICE_FPGA',                            11 );
/* @brief BSP */
define('DEVICE_BSP',                             20 );
/* @brief LWIP模块区间 */
define('DEVICE_LWIP',                            21 );
/* @brief IAP */
define('DEVICE_IAP',                             22 );
/* @brief 通道使能 */
define('CHANNEL_ENABLE',                         31 );
/* @brief 通道映射 */
define('CHANNEL_REMAP',                          32 );
/* @brief 纵向校正(俯仰角) */
define('CHANNEL_ELEVATION',                      33 );
/* @brief 横向校正(方位角) */
define('CHANNEL_AZIMUTH',                        34 );
/* @brief 底噪数据 */
define('DEVICE_BOTTOM_NOISE',                    35 );
/* @brief 内嵌点云处理 */
define('DEVICE_PCLD',                            36 );
/* @brief PetaLinux */
define('DEVICE_PETA_LINUX',                      40 );
/* @brief 最大值（不使用） */
define('DEVICE_MAX',                             60 );

//----------------------------------------------------------------------
//enum REG_CNT_E
    /* @brief 占用256个寄存器地址 */
define('REGS_CNT_GLOBAL',                        0x100);
    /* @brief 占用512个寄存器地址 */
define('REGS_CNT_HOST',                          0x200);
    /* @brief 占用256个寄存器地址 */
define('REGS_CNT_CI',                            0x100);
    /* @brief 占用256个寄存器地址 */
define('REGS_CNT_HTTP_SERVER',                   0x100);
    /* @brief 占用256个寄存器地址 */
define('REGS_CNT_EVB',                           0x100);
    /* @brief 占用256个寄存器地址 */
define('REGS_CNT_DELTA',                         0x100);
    /* @brief 占用256个寄存器地址，返回json格式数据 */
define('REGS_CNT_RPC',                           0x100);
    /* @brief 占用256个寄存器地址 */
define('REGS_CNT_ALG',                           0x100);
    /* @brief 所有32位地址空间 */
define('REGS_CNT_STM32',                         0xffffffff);
    /* @brief 所有32位地址空间,直接使用Xil_Out32/Xil_In32 */
define('REGS_CNT_FPGA',                          0xffffffff);
    /* @brief 占用256个寄存器地址 */
define('REGS_CNT_BSP',                           0x100);
    /* @brief 占用256个寄存器地址 */
define('REGS_CNT_LWIP',                          0x100);
    /* @brief 占用256个寄存器地址 */
define('REGS_CNT_IAP',                           0x100);
    /* @brief 占用256个寄存器地址，FML使用4个（host层实现过滤） */
define('REGS_CNT_CH_ENABLE',                     0x100);
    /* @brief 占用256个寄存器地址，FML使用4个 */
define('REGS_CNT_CH_REMAP',                      0x100);
    /* @brief 占用256个寄存器地址，FML使用4个 */
define('REGS_CNT_CH_ELEVATION',                  0x100);
    /* @brief 占用256个寄存器地址，FML使用4个 */
define('REGS_CNT_CH_AZIMUTH',                    0x100);
    /* @brief 默认占用4*4096个寄存器地址，可通过MEM_WRITE/MEM_DUMP直接读写数据，
也可通过寄存器直接修改单个值 */
define('REGS_CNT_NOISE_BASE',                    0xffffffff);
    /* @brief 内嵌点云处理查找表，可通过MEM_WRITE/MEM_DUMP直接读写数据，
也可通过寄存器直接修改单个值 */
define('REGS_CNT_PCLD',                           1024 );
    /* @brief  */
define('REGS_CNT_PETA_LINUX',                    0x100);
    /* @brief 单次传输的最大寄存器数量 */
define('REGS_CNT_ONCE_BUFFER_MAX',                1024 );


//----------------------------------------------------------------------
// 指令结构定义

//----------------------------------------------------------------------
// 指令响应格式

//----------------------------------------------------------------------
// IAP报文



